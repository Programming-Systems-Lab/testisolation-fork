The default execution results: 
  Test: dynoptic.invariants.NeverFollowedByTests.create: PASS
  Test: dynoptic.invariants.NeverFollowedByTests.testSatisfies: PASS
  Test: dynoptic.invariants.NeverFollowedByTests.getFirstSecond: PASS
  Test: dynoptic.invariants.NeverFollowedByTests.scmBadStatesString: PASS
  Test: dynoptic.invariants.NeverFollowedByTests.equality: PASS
  Test: dynoptic.invariants.AlwaysPrecedesTests.create: PASS
  Test: dynoptic.invariants.AlwaysPrecedesTests.testSatisfies: PASS
  Test: dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond: PASS
  Test: dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString: PASS
  Test: dynoptic.invariants.AlwaysPrecedesTests.equality: PASS
  Test: dynoptic.invariants.EventuallyHappensTests.create: PASS
  Test: dynoptic.invariants.EventuallyHappensTests.testSatisfies: PASS
  Test: dynoptic.invariants.EventuallyHappensTests.getFirstSecond: PASS
  Test: dynoptic.invariants.EventuallyHappensTests.scmBadStatesString: PASS
  Test: dynoptic.invariants.EventuallyHappensTests.equality: PASS
  Test: dynoptic.invariants.AlwaysFollowedByTests.create: PASS
  Test: dynoptic.invariants.AlwaysFollowedByTests.testSatisfies: PASS
  Test: dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond: PASS
  Test: dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString: PASS
  Test: dynoptic.invariants.AlwaysFollowedByTests.equality: PASS
  Test: dynoptic.invariants.checkers.CheckersTests.checkEventually: PASS
  Test: dynoptic.invariants.checkers.CheckersTests.checkAFby: PASS
  Test: dynoptic.invariants.checkers.CheckersTests.checkNFby: PASS
  Test: dynoptic.invariants.checkers.CheckersTests.checkAP: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.createRecv: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.createSend: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.createLocal: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.createSynthSend: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1: PASS
  Test: dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoAcceptStateFSM: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentFSMDiffEventOrder: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentDiffAcceptLabelFSM: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSMFalseDiffSize: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentOneStateFSM: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoStateFSM: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoInitStateFSM: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentDiffInitLabelFSM: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentSameLanguage: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSM: PASS
  Test: dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSMFalseDiffPid: PASS
  Test: dynoptic.model.automaton.EventTypeEncodingsTests.encodeZeroEvent: PASS
  Test: dynoptic.model.automaton.EventTypeEncodingsTests.encodeOneEvent: PASS
  Test: dynoptic.model.automaton.EventTypeEncodingsTests.encodeTwoEvents: PASS
  Test: dynoptic.model.automaton.EventTypeEncodingsTests.encodeThreeEvents: PASS
  Test: dynoptic.model.automaton.EventTypeEncodingsTests.encodeDifferentEvents: PASS
  Test: dynoptic.model.export.GraphExporterTests.twoFSMsTwoStatesEachLocalEventsTest: ERROR
  Test: dynoptic.model.export.GraphExporterTests.oneFSMOneStateTest: ERROR
  Test: dynoptic.model.export.GraphExporterTests.oneFSMTwoStatesTest: ERROR
  Test: dynoptic.model.export.GraphExporterTests.twoFSMsTwoStatesEachCommEventsTest: ERROR
  Test: dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState: PASS
  Test: dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMStateWithTxns: PASS
  Test: dynoptic.model.fifosys.cfsm.CFSMTests.scmString: PASS
  Test: dynoptic.model.fifosys.cfsm.CFSMTests.initsAccepts: PASS
  Test: dynoptic.model.fifosys.cfsm.CFSMTests.createEmptyCFSM: PASS
  Test: dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithAFby: PASS
  Test: dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithNFby: PASS
  Test: dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithAP: PASS
  Test: dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyAFby: ERROR
  Test: dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyNFby: ERROR
  Test: dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyAP: ERROR
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMTests.scmString: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMTests.createFSM: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMTests.createFSMWithTxns: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMTests.createBadFSM1: ERROR
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMTests.createBadFSM2: ERROR
  Test: dynoptic.model.fifosys.cfsm.fsm.BadStateTests.createAndScmString: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.minimizeTest: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicOneStateNoTransition: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicOneStateWithTransition: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicTwoStatesOneTransition: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicTwoStatesTwoTransitions: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.nonDeterministicSingleInitState: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.nonDeterministicMultipleInitStates: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.scmString: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.checkInitAcceptPid: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.oneTransition: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.twoTransitions: PASS
  Test: dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.wrongEventPid: ERROR
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId: PASS
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId: PASS
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId: ERROR
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId: PASS
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping: PASS
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals: PASS
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds: PASS
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
  Test: dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable: PASS
  Test: dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals: PASS
  Test: dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty: PASS
  Test: dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState: PASS
  Test: dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck: PASS
  Test: dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq: PASS
  Test: dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs: PASS
  Test: dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState: PASS
  Test: dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath: PASS
  Test: dynoptic.model.fifosys.gfsm.GFSMTests.gfsmToCFSM: PASS
  Test: dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM: PASS
  Test: dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace: PASS
  Test: dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM: ERROR
  Test: dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate: PASS
  Test: dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns: PASS
  Test: mcscm.McScMTests.testEmptyScmInput: ERROR
  Test: mcscm.McScMTests.testSafeScmInput: ERROR
  Test: mcscm.McScMTests.testUnsafeScmInputLen1: ERROR
  Test: mcscm.McScMTests.testUnsafeScmInputLen2: ERROR